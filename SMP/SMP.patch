diff --git a/src/argparse.c b/src/argparse.c
index c59e5b2..3e9f9c0 100644
--- a/src/argparse.c
+++ b/src/argparse.c
@@ -33,14 +33,19 @@
 #include <stdarg.h>
 #include <limits.h>
 #include <errno.h>
-#include <unistd.h>
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
 #include <time.h>
 
 #include "gpgrt-int.h"
 
 #ifdef HAVE_W32_SYSTEM
+# include <io.h>
 # define PATHSEP_C ';'
 # define DIRSEP_C  '\\'
+# define R_OK    4
+# define strcasecmp _stricmp
 #else
 # define PATHSEP_C ':'
 # define DIRSEP_C  '/'
diff --git a/src/estream-printf.c b/src/estream-printf.c
index f419a1e..9eafad6 100644
--- a/src/estream-printf.c
+++ b/src/estream-printf.c
@@ -82,7 +82,9 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <unistd.h>
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
 #include <stdarg.h>
 #include <errno.h>
 #include <stddef.h>
diff --git a/src/estream.c b/src/estream.c
index 66ebc4b..1d11e4e 100644
--- a/src/estream.c
+++ b/src/estream.c
@@ -68,12 +68,18 @@
 # include <sys/time.h>
 #endif
 #include <sys/types.h>
-#include <sys/file.h>
-#include <sys/stat.h>
+#ifdef HAVE_SYS_FILE_H
+# include <sys/file.h>
+#endif
+#ifdef HAVE_SYS_STAT_H
+# include <sys/stat.h>
+#endif
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <unistd.h>
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
 #include <stdarg.h>
 #include <fcntl.h>
 #include <errno.h>
@@ -83,6 +89,7 @@
 #  include <winsock2.h>
 # endif
 # include <windows.h>
+# include <io.h>
 #else
 # ifdef HAVE_POLL_H
 #  include <poll.h>
@@ -113,6 +120,15 @@
 
 
 #ifdef HAVE_W32_SYSTEM
+# ifndef S_IRUSR
+#  define S_IRUSR _S_IREAD
+# endif
+# ifndef S_IWUSR
+#  define S_IWUSR _S_IWRITE
+# endif
+# ifndef S_IXUSR
+#  define S_IXUSR _S_IEXEC
+# endif
 # ifndef  S_IRGRP
 #  define S_IRGRP S_IRUSR
 # endif
@@ -2030,6 +2046,9 @@ func_file_create_w32 (void **cookie, HANDLE *rethd, const char *path,
   else
     creation_distribution |= OPEN_EXISTING;
 
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP || WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP)
+  hd = CreateFile2 (wpath, desired_access, share_mode, creation_distribution, NULL);
+#else
   hd = CreateFileW (wpath,
                     desired_access,
                     share_mode,
@@ -2037,6 +2056,7 @@ func_file_create_w32 (void **cookie, HANDLE *rethd, const char *path,
                     creation_distribution,
                     flags_and_attrs,
                     NULL); /* template file  */
+#endif
   if (hd == INVALID_HANDLE_VALUE)
     {
       _set_errno (map_w32_to_errno (GetLastError ()));
@@ -5074,27 +5094,27 @@ tmpfd (void)
 {
 #ifdef HAVE_W32_SYSTEM
   int attempts, n;
-  char buffer[MAX_PATH+9+12+1];
-# define mystrlen(a) strlen (a)
-  char *name, *p;
+  WCHAR buffer[MAX_PATH+9+12+1];
+# define mystrlen(a) wcslen (a)
+  WCHAR *name, *p;
   HANDLE file;
   int pid = GetCurrentProcessId ();
   unsigned int value;
   int i;
 
-  n = GetTempPath (MAX_PATH+1, buffer);
+  n = GetTempPathW (MAX_PATH+1, buffer);
   if (!n || n > MAX_PATH || mystrlen (buffer) > MAX_PATH)
     {
       _set_errno (ENOENT);
       return -1;
     }
   p = buffer + mystrlen (buffer);
-  strcpy (p, "_estream");
+  wcscpy (p, L"_estream");
   p += 8;
   /* We try to create the directory but don't care about an error as
      it may already exist and the CreateFile would throw an error
      anyway.  */
-  CreateDirectory (buffer, NULL);
+  CreateDirectoryW (buffer, NULL);
   *p++ = '\\';
   name = p;
   for (attempts=0; attempts < 10; attempts++)
@@ -5106,14 +5126,25 @@ tmpfd (void)
           *p++ = tohex (((value >> 28) & 0x0f));
           value <<= 4;
         }
-      strcpy (p, ".tmp");
-      file = CreateFile (buffer,
+      wcscpy (p, L".tmp");
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+      CREATEFILE2_EXTENDED_PARAMETERS ex = { 0 };
+      ex.dwFileFlags = FILE_FLAG_DELETE_ON_CLOSE;
+      ex.dwFileAttributes = FILE_ATTRIBUTE_TEMPORARY;
+      file = CreateFile2(buffer,
+                         GENERIC_READ | GENERIC_WRITE,
+                         0,
+                         CREATE_NEW,
+                         &ex);
+ #else
+      file = CreateFileW (buffer,
                          GENERIC_READ | GENERIC_WRITE,
                          0,
                          NULL,
                          CREATE_NEW,
                          FILE_ATTRIBUTE_TEMPORARY | FILE_FLAG_DELETE_ON_CLOSE,
                          NULL);
+#endif
       if (file != INVALID_HANDLE_VALUE)
         {
           int fd = _open_osfhandle ((intptr_t)file, 0);
diff --git a/src/gpg-error.c b/src/gpg-error.c
index 4e8bd8b..2c64a40 100644
--- a/src/gpg-error.c
+++ b/src/gpg-error.c
@@ -53,6 +53,9 @@
 
 
 #if HAVE_W32_SYSTEM
+# define strcasecmp _stricmp
+# define strncasecmp _strnicmp
+
 /* The implementation follows below.  */
 static char *get_locale_dir (void);
 static void drop_locale_dir (char *locale_dir);
diff --git a/src/gpg-error.h.in b/src/gpg-error.h.in
index 5b1b9d2..c22a6ba 100644
--- a/src/gpg-error.h.in
+++ b/src/gpg-error.h.in
@@ -249,7 +249,7 @@ typedef unsigned int gpg_error_t;
 
 /* A macro defined if a GCC style __FUNCTION__ macro is available.  */
 #undef GPGRT_HAVE_MACRO_FUNCTION
-#if _GPG_ERR_GCC_VERSION >= 20500
+#if _GPG_ERR_GCC_VERSION >= 20500 || defined(_MSC_VER)
 # define GPGRT_HAVE_MACRO_FUNCTION 1
 #endif
 
diff --git a/src/init.c b/src/init.c
index c4b7e56..e9ec85e 100644
--- a/src/init.c
+++ b/src/init.c
@@ -42,6 +42,10 @@ static int tls_index = TLS_OUT_OF_INDEXES;  /* Index for the TLS functions.  */
 static char *get_locale_dir (void);
 static void drop_locale_dir (char *locale_dir);
 
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+# define getenv(x) NULL
+#endif
+
 #else /*!HAVE_W32_SYSTEM*/
 
 #define get_locale_dir() LOCALEDIR
@@ -121,6 +125,19 @@ _gpg_err_init (void)
   return 0;
 }
 
+#if defined(HAVE_W32_SYSTEM) && !defined(DLL_EXPORT) && defined(_WIN32) && defined(_MSC_VER)
+# define _GPG_ERR_WIN32_CONSTRUCTOR_(_func, p) \
+   static int _func ## _wrapper(void) { _func(); return 0; } \
+   __pragma(section(".CRT$XCU",read)) \
+   __declspec(allocate(".CRT$XCU")) int (* _func##_)(void) = _func ## _wrapper; \
+   __pragma(comment(linker,"/include:" p #_func "_"))
+# ifdef _WIN64
+#  define _GPG_ERR_WIN32_CONSTRUCTOR(f) _GPG_ERR_WIN32_CONSTRUCTOR_(f, "")
+# else
+#  define _GPG_ERR_WIN32_CONSTRUCTOR(f) _GPG_ERR_WIN32_CONSTRUCTOR_(f, "_")
+# endif
+_GPG_ERR_WIN32_CONSTRUCTOR(_gpg_err_init)
+#endif
 
 /* Deinitialize libgpg-error.  This function is only used in special
    circumstances.  No gpg-error function should be used after this
@@ -655,7 +672,7 @@ get_tls (void)
 
 /* Entry point called by the DLL loader.  */
 #ifdef DLL_EXPORT
-int WINAPI
+BOOL WINAPI
 DllMain (HINSTANCE hinst, DWORD reason, LPVOID reserved)
 {
   struct tls_space_s *tls;
diff --git a/src/logging.c b/src/logging.c
index 4f52d80..ad21ff5 100644
--- a/src/logging.c
+++ b/src/logging.c
@@ -38,13 +38,17 @@
 #  include <winsock2.h>
 # endif
 # include <windows.h>
+# include <process.h>
+# include <io.h>
 #else /*!HAVE_W32_SYSTEM*/
 # include <sys/socket.h>
 # include <sys/un.h>
 # include <netinet/in.h>
 # include <arpa/inet.h>
 #endif /*!HAVE_W32_SYSTEM*/
-#include <unistd.h>
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
 #include <fcntl.h>
 /* #include <execinfo.h> */
 
@@ -53,6 +57,10 @@
 
 
 #ifdef HAVE_W32_SYSTEM
+# ifndef S_IRUSR
+#  define S_IRUSR _S_IREAD
+#  define S_IWUSR _S_IWRITE
+# endif
 # ifndef S_IRWXG
 #  define S_IRGRP S_IRUSR
 #  define S_IWGRP S_IWUSR
@@ -61,6 +69,9 @@
 #  define S_IROTH S_IRUSR
 #  define S_IWOTH S_IWUSR
 # endif
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+# define getpid() GetCurrentProcessId()
+#endif
 #endif
 
 
diff --git a/src/mkheader.c b/src/mkheader.c
index d9b8331..d002fb4 100644
--- a/src/mkheader.c
+++ b/src/mkheader.c
@@ -16,7 +16,12 @@
 #include <stdlib.h>
 #include <string.h>
 #include <errno.h>
+#ifdef _WIN32
+#include <io.h>
+#define R_OK 4
+#else
 #include <unistd.h>
+#endif
 
 #define PGM "mkheader"
 
diff --git a/src/spawn-w32.c b/src/spawn-w32.c
index e6ce28f..8789c4b 100644
--- a/src/spawn-w32.c
+++ b/src/spawn-w32.c
@@ -34,13 +34,24 @@
 #ifdef HAVE_SIGNAL_H
 # include <signal.h>
 #endif
-#include <unistd.h>
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
 #include <fcntl.h>
 #ifdef HAVE_STAT
 # include <sys/stat.h>
 #endif
 #define WIN32_LEAN_AND_MEAN  /* We only need the OS core stuff.  */
+#include <io.h>
 #include <windows.h>
+# ifndef F_OK
+#  define F_OK 0
+# endif
+
+# include <process.h>
+# if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP || WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP)
+#  define IS_UWP 1
+# endif
 
 #define NEED_STRUCT_SPAWN_CB_ARG
 #include "gpgrt-int.h"
@@ -205,6 +216,7 @@ create_inheritable_pipe (HANDLE filedes[2], int flags)
     }
   _gpgrt_post_syscall ();
 
+#ifndef IS_UWP
   if ((flags & INHERIT_READ) == 0)
     if (! SetHandleInformation (r, HANDLE_FLAG_INHERIT, 0))
       goto fail;
@@ -212,6 +224,7 @@ create_inheritable_pipe (HANDLE filedes[2], int flags)
   if ((flags & INHERIT_WRITE) == 0)
     if (! SetHandleInformation (w, HANDLE_FLAG_INHERIT, 0))
       goto fail;
+#endif
 
   filedes[0] = r;
   filedes[1] = w;
@@ -231,10 +244,14 @@ w32_open_null (int for_write)
 {
   HANDLE hfile;
 
+#ifndef IS_UWP
   hfile = CreateFileW (L"nul",
                        for_write? GENERIC_WRITE : GENERIC_READ,
                        FILE_SHARE_READ | FILE_SHARE_WRITE,
                        NULL, OPEN_EXISTING, 0, NULL);
+#else
+  hfile = CreateFile2(L"nul", for_write ? GENERIC_WRITE : GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, OPEN_EXISTING, NULL);
+#endif
   if (hfile == INVALID_HANDLE_VALUE)
     _gpgrt_log_debug ("can't open 'nul': ec=%d\n", (int)GetLastError ());
   return hfile;
@@ -261,7 +278,7 @@ do_create_pipe_and_estream (int filedes[2],
   err = GPG_ERR_GENERAL;
   if (!create_inheritable_pipe (fds, flags))
     {
-      filedes[0] = _open_osfhandle (handle_to_fd (fds[0]), O_RDONLY);
+      filedes[0] = _open_osfhandle ((intptr_t) (fds[0]), O_RDONLY);
       if (filedes[0] == -1)
         {
           _gpgrt_log_info ("failed to translate osfhandle %p\n", fds[0]);
@@ -269,7 +286,7 @@ do_create_pipe_and_estream (int filedes[2],
         }
       else
         {
-          filedes[1] = _open_osfhandle (handle_to_fd (fds[1]), O_APPEND);
+          filedes[1] = _open_osfhandle ((intptr_t) (fds[1]), O_APPEND);
           if (filedes[1] == -1)
             {
               _gpgrt_log_info ("failed to translate osfhandle %p\n", fds[1]);
@@ -332,6 +349,7 @@ _gpgrt_make_pipe (int filedes[2], estream_t *r_fp, int direction, int nonblock)
 static int
 check_windows_version (void)
 {
+#ifndef IS_UWP
   static int is_vista_or_later = -1;
 
   OSVERSIONINFO osvi;
@@ -347,6 +365,9 @@ check_windows_version (void)
     }
 
   return is_vista_or_later;
+#else
+    return 1;
+#endif
 }
 
 
@@ -355,7 +376,11 @@ spawn_detached (const char *pgmname, char *cmdline, gpgrt_spawn_actions_t act)
 {
   SECURITY_ATTRIBUTES sec_attr;
   PROCESS_INFORMATION pi = { NULL, 0, 0, 0 };
+#ifndef IS_UWP
   STARTUPINFOEXW si;
+#else
+  STARTUPINFOW si;
+#endif
   int cr_flags;
   wchar_t *wcmdline = NULL;
   wchar_t *wpgmname = NULL;
@@ -408,6 +433,7 @@ spawn_detached (const char *pgmname, char *cmdline, gpgrt_spawn_actions_t act)
 
       if (j)
         {
+#ifndef IS_UWP
           if (check_windows_version ())
             {
               InitializeProcThreadAttributeList (NULL, 1, 0, &attr_list_size);
@@ -423,6 +449,7 @@ spawn_detached (const char *pgmname, char *cmdline, gpgrt_spawn_actions_t act)
                                          PROC_THREAD_ATTRIBUTE_HANDLE_LIST,
                                          hd, sizeof (HANDLE) * j, NULL, NULL);
             }
+#endif
           ask_inherit = TRUE;
         }
     }
@@ -433,6 +460,7 @@ spawn_detached (const char *pgmname, char *cmdline, gpgrt_spawn_actions_t act)
   sec_attr.bInheritHandle = FALSE;
 
   /* Start the process.  */
+#ifndef IS_UWP
   si.StartupInfo.cb = sizeof (si);
   si.StartupInfo.dwFlags = ((i > 0 ? STARTF_USESTDHANDLES : 0)
                             | STARTF_USESHOWWINDOW);
@@ -440,6 +468,7 @@ spawn_detached (const char *pgmname, char *cmdline, gpgrt_spawn_actions_t act)
   si.StartupInfo.hStdInput  = act->hd[0];
   si.StartupInfo.hStdOutput = act->hd[1];
   si.StartupInfo.hStdError  = act->hd[2];
+#endif
 
   cr_flags = (CREATE_DEFAULT_ERROR_MODE
               | GetPriorityClass (GetCurrentProcess ())
@@ -478,8 +507,10 @@ spawn_detached (const char *pgmname, char *cmdline, gpgrt_spawn_actions_t act)
       xfree (cmdline);
       return GPG_ERR_GENERAL;
     }
+#ifndef IS_UWP
   if (si.lpAttributeList)
     DeleteProcThreadAttributeList (si.lpAttributeList);
+#endif
   xfree (wpgmname);
   xfree (wcmdline);
   xfree (cmdline);
@@ -558,7 +589,11 @@ _gpgrt_process_spawn (const char *pgmname, const char *argv[],
   gpgrt_process_t process;
   SECURITY_ATTRIBUTES sec_attr;
   PROCESS_INFORMATION pi = { NULL, 0, 0, 0 };
+#ifndef IS_UWP
   STARTUPINFOEXW si;
+#else
+  STARTUPINFOW si;
+#endif
   int cr_flags;
   char *cmdline;
   wchar_t *wcmdline = NULL;
@@ -748,6 +783,7 @@ _gpgrt_process_spawn (const char *pgmname, const char *argv[],
 
       if (j)
         {
+#ifndef IS_UWP
           if (check_windows_version ())
             {
               InitializeProcThreadAttributeList (NULL, 1, 0, &attr_list_size);
@@ -779,6 +815,7 @@ _gpgrt_process_spawn (const char *pgmname, const char *argv[],
                                          PROC_THREAD_ATTRIBUTE_HANDLE_LIST,
                                          hd, sizeof (HANDLE) * j, NULL, NULL);
             }
+#endif
           ask_inherit = TRUE;
         }
     }
@@ -789,6 +826,7 @@ _gpgrt_process_spawn (const char *pgmname, const char *argv[],
   sec_attr.bInheritHandle = FALSE;
 
   /* Start the process.  */
+#ifndef IS_UWP
   si.StartupInfo.cb = sizeof (si);
   si.StartupInfo.dwFlags = ((i > 0 ? STARTF_USESTDHANDLES : 0)
                             | STARTF_USESHOWWINDOW);
@@ -796,6 +834,7 @@ _gpgrt_process_spawn (const char *pgmname, const char *argv[],
   si.StartupInfo.hStdInput  = act->hd[0];
   si.StartupInfo.hStdOutput = act->hd[1];
   si.StartupInfo.hStdError  = act->hd[2];
+#endif
 
   /* log_debug ("CreateProcess, path='%s' cmdline='%s'\n", pgmname, cmdline); */
   cr_flags = (CREATE_DEFAULT_ERROR_MODE
@@ -848,8 +887,10 @@ _gpgrt_process_spawn (const char *pgmname, const char *argv[],
       return GPG_ERR_GENERAL;
     }
 
+#ifndef IS_UWP
   if (si.lpAttributeList)
     DeleteProcThreadAttributeList (si.lpAttributeList);
+#endif
   xfree (wpgmname);
   xfree (wcmdline);
   xfree (cmdline);
@@ -869,6 +910,7 @@ _gpgrt_process_spawn (const char *pgmname, const char *argv[],
   /*           pi.hProcess, pi.hThread, */
   /*           (int) pi.dwProcessId, (int) pi.dwThreadId); */
 
+#ifndef IS_UWP
   if (allow_foreground_window)
     {
       /* Fixme: For unknown reasons AllowSetForegroundWindow returns
@@ -878,6 +920,7 @@ _gpgrt_process_spawn (const char *pgmname, const char *argv[],
         _gpgrt_log_info ("AllowSetForegroundWindow() failed: ec=%d\n",
                          (int)GetLastError ());
     }
+#endif
 
   /* Process has been created suspended; resume it now. */
   _gpgrt_pre_syscall ();
diff --git a/src/strerror.c b/src/strerror.c
index 51e347b..5f094cd 100644
--- a/src/strerror.c
+++ b/src/strerror.c
@@ -32,6 +32,13 @@
 #include "gettext.h"
 #include "err-codes.h"
 
+#ifdef _MSC_VER
+#   include <crtversion.h>
+#   if _VC_CRT_MAJOR_VERSION < 14
+#       define snprintf _snprintf
+#   endif
+#endif
+
 #if defined(ENABLE_NLS) && defined(HAVE_LANGINFO_CODESET)
 #include <langinfo.h>
 #endif
diff --git a/src/sysutils.c b/src/sysutils.c
index 8eee084..f602f58 100644
--- a/src/sysutils.c
+++ b/src/sysutils.c
@@ -22,10 +22,17 @@
 #include <stdlib.h>
 #include <stdint.h>
 #include <string.h>
-#include <unistd.h>
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
 #include <errno.h>
 #ifdef HAVE_W32_SYSTEM
 # include <windows.h>
+# include <direct.h>
+# include <io.h>
+# ifndef W_OK
+#  define W_OK 2
+# endif
 #endif
 #ifdef HAVE_STAT
 # include <sys/stat.h>
@@ -68,7 +75,7 @@ _gpgrt_getenv (const char *name)
     int len, size;
     char *result;
 
-    len = GetEnvironmentVariable (name, NULL, 0);
+    len = GetEnvironmentVariableA (name, NULL, 0);
     if (!len && GetLastError () == ERROR_ENVVAR_NOT_FOUND)
       {
         _gpg_err_set_errno (0);
@@ -79,7 +86,7 @@ _gpgrt_getenv (const char *name)
     result = _gpgrt_malloc (size);
     if (!result)
       return NULL;
-    len = GetEnvironmentVariable (name, result, size);
+    len = GetEnvironmentVariableA (name, result, size);
     if (len >= size)
       {
         /* Changed in the meantime - retry.  */
@@ -140,7 +147,7 @@ _gpgrt_setenv (const char *name, const char *value, int overwrite)
 
     if (!value && overwrite)
       {
-        if (!SetEnvironmentVariable (name, NULL))
+        if (!SetEnvironmentVariableA (name, NULL))
           return GPG_ERR_EINVAL;
         if (getenv (name))
 #if defined(_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES)
@@ -171,8 +178,8 @@ _gpgrt_setenv (const char *name, const char *value, int overwrite)
         return 0;
       }
 
-    exists = GetEnvironmentVariable (name, tmpbuf, sizeof tmpbuf);
-    if ((! exists || overwrite) && !SetEnvironmentVariable (name, value))
+    exists = GetEnvironmentVariableA (name, tmpbuf, sizeof tmpbuf);
+    if ((! exists || overwrite) && !SetEnvironmentVariableA (name, value))
       return GPG_ERR_EINVAL; /* (Might also be ENOMEM.) */
     if (overwrite || !getenv (name))
 #if defined(_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES)
@@ -594,6 +601,7 @@ _gpgrt_getusername (void)
   char *result = NULL;
 
 #ifdef HAVE_W32_SYSTEM
+#if !defined(WINAPI_FAMILY) || (WINAPI_FAMILY!=WINAPI_FAMILY_PC_APP && WINAPI_FAMILY!=WINAPI_FAMILY_PHONE_APP)
   wchar_t wtmp[1];
   wchar_t *wbuf;
   DWORD wsize = 1;
@@ -616,6 +624,7 @@ _gpgrt_getusername (void)
   xfree (wbuf);
   return buf;
 
+#endif
 #else /* !HAVE_W32_SYSTEM */
 
 # if defined(HAVE_PWD_H) && defined(HAVE_GETPWUID)
diff --git a/src/w32-estream.c b/src/w32-estream.c
index 06851a5..1efc76b 100644
--- a/src/w32-estream.c
+++ b/src/w32-estream.c
@@ -30,6 +30,9 @@
 #include <string.h>
 #include <errno.h>
 #include <fcntl.h>
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
 #ifdef HAVE_SYS_TIME_H
 # include <sys/time.h>
 #endif
@@ -38,6 +41,9 @@
 #endif
 #include <io.h>
 #include <windows.h>
+#ifdef HAVE_W32_SYSTEM
+typedef SSIZE_T ssize_t;
+#endif
 
 #ifndef EOPNOTSUPP
 # define EOPNOTSUPP ENOSYS
diff --git a/src/w32-gettext.c b/src/w32-gettext.c
index 817c1ca..2f45f18 100644
--- a/src/w32-gettext.c
+++ b/src/w32-gettext.c
@@ -649,7 +649,11 @@ my_nl_locale_name (const char *categoryname)
         return retval;
 
       /* Use native Win32 API locale ID.  */
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP || WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP)
+      lcid = LOCALE_USER_DEFAULT;
+#else
       lcid = GetThreadLocale ();
+#endif
       /* Strip off the sorting rules, keep only the language part.  */
       langid = LANGIDFROMLCID (lcid);
     }
@@ -1216,14 +1220,23 @@ load_domain (const char *filename)
     if (!wfilename)
       fh = INVALID_HANDLE_VALUE;
     else
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP || WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP)
+      fh = CreateFile2 (wfilename, GENERIC_READ, FILE_SHARE_WRITE, OPEN_EXISTING, NULL);
+#else
       fh = CreateFileW (wfilename, GENERIC_READ, FILE_SHARE_WRITE, NULL,
                         OPEN_EXISTING, 0, NULL);
+#endif
     xfree (wfilename);
+    if (fh == INVALID_HANDLE_VALUE)
+        return NULL;
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP || WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP)
+    WIN32_FILE_ATTRIBUTE_DATA fileinfo;
+    GetFileAttributesEx(wfilename, GetFileExInfoStandard, &fileinfo);
+    size = fileinfo.nFileSizeHigh;
+#else
+    size = GetFileSize(fh, NULL);
+#endif
   }
-  if (fh == INVALID_HANDLE_VALUE)
-    return NULL;
-
-  size = GetFileSize (fh, NULL);
   if (size == INVALID_FILE_SIZE)
     {
       CloseHandle (fh);
@@ -1425,6 +1438,9 @@ wchar_to_cp (const wchar_t *string, size_t length, size_t *retlen,
 static char *
 wchar_to_native (const wchar_t *string, size_t length, size_t *retlen)
 {
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP || WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP)
+  unsigned int cpno = CP_ACP;
+#else
   unsigned int cpno = GetConsoleOutputCP ();
 
   /* GetConsoleOutputCP returns the 8-Bit codepage that should be used
@@ -1432,6 +1448,7 @@ wchar_to_native (const wchar_t *string, size_t length, size_t *retlen)
      to the codepage GUI programs should use (CP_ACP). */
   if (!cpno)
     cpno = GetACP ();
+#endif
 
   return wchar_to_cp (string, length, retlen, cpno);
 }
diff --git a/src/w32-iconv.c b/src/w32-iconv.c
index 888b722..faad56b 100644
--- a/src/w32-iconv.c
+++ b/src/w32-iconv.c
@@ -951,7 +951,11 @@ name_to_codepage(const char *name)
 
     if (*name == '\0' ||
 	strcmp(name, "char") == 0)
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP || WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP)
+        return CP_ACP;
+#else
         return GetACP();
+#endif
     else if (strcmp(name, "wchar_t") == 0)
         return 1200;
     else if (_strnicmp(name, "cp", 2) == 0)
diff --git a/src/w32-reg.c b/src/w32-reg.c
index b1134a5..26d1687 100644
--- a/src/w32-reg.c
+++ b/src/w32-reg.c
@@ -46,6 +46,9 @@ char *
 _gpgrt_w32_reg_query_string (const char *root, const char *dir,
                              const char *name)
 {
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP || WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP)
+    return NULL;
+#else
   HKEY root_key, key_handle;
   DWORD n1, nbytes, type;
   char *result = NULL;
@@ -110,7 +113,7 @@ _gpgrt_w32_reg_query_string (const char *root, const char *dir,
       tmp = xtrymalloc (n1 + 1);
       if (!tmp)
         goto leave;
-      nbytes = ExpandEnvironmentStrings (result, tmp, n1);
+      nbytes = ExpandEnvironmentStringsA (result, tmp, n1);
       if (nbytes && nbytes > n1)
         {
           xfree (tmp);
@@ -118,7 +121,7 @@ _gpgrt_w32_reg_query_string (const char *root, const char *dir,
           tmp = xtrymalloc (n1 + 1);
           if (!tmp)
             goto leave;
-          nbytes = ExpandEnvironmentStrings (result, tmp, n1);
+          nbytes = ExpandEnvironmentStringsA (result, tmp, n1);
           if (nbytes && nbytes > n1) {
             xfree (tmp); /* Oops - truncated, better don't expand at all. */
             goto leave;
@@ -164,6 +167,7 @@ _gpgrt_w32_reg_query_string (const char *root, const char *dir,
  leave:
   RegCloseKey (key_handle);
   return result;
+#endif
 }
 
 
